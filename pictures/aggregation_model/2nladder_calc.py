from mpmath import *
from pylab_params import *
from pylab import *
from math import log
from cmath import exp as cexp, isnan

# DEBUG at 3.0, final at 7.0
num_points = 10**(7.0)
MAXV = 10.**200

def Z(beta):
    n = 30
    q = 2
    J1 = -2
    J2 = -1

    v1 = cexp(J1*beta)-1
    v2 = cexp(J2*beta)-1
    
    f = v2+q
    Z1 = q*v1 + q**2
    Z2 = q**2*v1**2 + q**2*v2**2 + q*v1**2*v2**2 + 2*q*v1*v2**2 + 2*q*v2*v1**2 + 4*v1*v2*q**2 + 2*v1*q**3 + 2*v2*q**3 + q**4

    zx = (-3*v1**2*v2**2*f**2*Z1-3*v1**3*v2**3*f*Z1-v1**3*v2**3*Z1-3*v1**3*v2**4*Z1+v1**2*v2**2*Z2-3*v1**4*v2**4*Z1+f**4*Z2-f**6*Z1-3*v1**3*v2**4*f**2*Z1-3*v1**2*v2**3*f**2*Z1-4*v1**3*v2**3*f**3*Z1+2*v1**2*v2**3*Z2+2*v1**3*v2**3*Z2-3*v1**3*v2**5*Z1-6*v1**4*v2**5*Z1-3*v1**5*v2**5*Z1+v1**2*v2**4*Z2+2*v1**3*v2**4*Z2-v1**3*v2**6*Z1-3*v1**4*v2**6*Z1-3*v1**5*v2**6*Z1+v1**4*v2**4*Z2-v1**6*v2**6*Z1-3*v1**4*v2**4*f**2*Z1+v1**2*v2**2*f**2*Z2-6*v1**3*v2**3*f**2*Z1-3*v1**2*v2**2*f**4*Z1+2*v1*v2*Z2*f**2+2*v1**2*v2**2*Z2*f-6*v1**3*v2**4*Z1*f-6*v1**4*v2**4*Z1*f+2*v1**2*v2**3*Z2*f-3*v1**3*v2**5*Z1*f-6*v1**4*v2**5*Z1*f+2*v1**3*v2**3*Z2*f-3*v1**5*v2**5*Z1*f-3*f**4*v1*v2*Z1-6*f**3*v1**2*v2**2*Z1-3*f**5*v1*v2*Z1-3*f**3*v1**2*v2**3*Z1+2*v1*v2*f**3*Z2-2*v1**2*v2**3*Z1*sqrt(2*f**2*v1*v2+2*f**3*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**2*v2**3+2*v1**3*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)-2*v1**3*v2**3*Z1*sqrt(2*f**2*v1*v2+2*f**3*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**2*v2**3+2*v1**3*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)-v1**4*v2**4*Z1*sqrt(2*f**2*v1*v2+2*f**3*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**2*v2**3+2*v1**3*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)-2*v1**2*v2**2*f**2*Z1*sqrt(2*f**2*v1*v2+2*f**3*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**2*v2**3+2*v1**3*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)+v1*v2**2*Z2*sqrt(2*f**2*v1*v2+2*f**3*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**2*v2**3+2*v1**3*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)-v1*v2**2*f**2*Z1*sqrt(2*f**2*v1*v2+2*f**3*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**2*v2**3+2*v1**3*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)-2*f**2*v1*v2*Z1*sqrt(2*f**2*v1*v2+2*f**3*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**2*v2**3+2*v1**3*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)-v1**2*v2**2*Z1*sqrt(2*f**2*v1*v2+2*f**3*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**2*v2**3+2*v1**3*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)+v1*v2*Z2*sqrt(2*f**2*v1*v2+2*f**3*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**2*v2**3+2*v1**3*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)-v1**2*v2**4*Z1*sqrt(2*f**2*v1*v2+2*f**3*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**2*v2**3+2*v1**3*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)-2*v1**3*v2**4*Z1*sqrt(2*f**2*v1*v2+2*f**3*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**2*v2**3+2*v1**3*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)-f**4*Z1*sqrt(2*f**2*v1*v2+2*f**3*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**2*v2**3+2*v1**3*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)-2*v1**2*v2**3*f*Z1*sqrt(2*f**2*v1*v2+2*f**3*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**2*v2**3+2*v1**3*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)-2*v1**3*v2**3*f*Z1*sqrt(2*f**2*v1*v2+2*f**3*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**2*v2**3+2*v1**3*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)-2*f**3*v1*v2*Z1*sqrt(2*f**2*v1*v2+2*f**3*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**2*v2**3+2*v1**3*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)+v1**2*v2**2*Z2*sqrt(2*f**2*v1*v2+2*f**3*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**2*v2**3+2*v1**3*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)-2*v1**2*v2**2*f*Z1*sqrt(2*f**2*v1*v2+2*f**3*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**2*v2**3+2*v1**3*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)+v1*v2*f*Z2*sqrt(2*f**2*v1*v2+2*f**3*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**2*v2**3+2*v1**3*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)+f**2*Z2*sqrt(2*f**2*v1*v2+2*f**3*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**2*v2**3+2*v1**3*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4))*(-(2*v1*v2**2*f**2+2*v1**2*v2**2*f**2)/(-v1*v2*f-v1*v2**2-f**2-v1*v2-v1**2*v2**2-sqrt(2*f**2*v1*v2+2*f**3*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**2*v2**3+2*v1**3*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)))**n/(sqrt(2*f**2*v1*v2+2*f**3*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**2*v2**3+2*v1**3*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)*v1*v2**2*f**2*(1+v1)*(-v1*v2*f-v1*v2**2-f**2-v1*v2-v1**2*v2**2-sqrt(2*f**2*v1*v2+2*f**3*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**2*v2**3+2*v1**3*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)))+(3*v1**2*v2**2*f**2*Z1+3*v1**3*v2**3*f*Z1+v1**3*v2**3*Z1+3*v1**3*v2**4*Z1-v1**2*v2**2*Z2+3*v1**4*v2**4*Z1-f**4*Z2+f**6*Z1+3*v1**3*v2**4*f**2*Z1+3*v1**2*v2**3*f**2*Z1+4*v1**3*v2**3*f**3*Z1-2*v1**2*v2**3*Z2-2*v1**3*v2**3*Z2+3*v1**3*v2**5*Z1+6*v1**4*v2**5*Z1+3*v1**5*v2**5*Z1-v1**2*v2**4*Z2-2*v1**3*v2**4*Z2+v1**3*v2**6*Z1+3*v1**4*v2**6*Z1+3*v1**5*v2**6*Z1-v1**4*v2**4*Z2+v1**6*v2**6*Z1+3*v1**4*v2**4*f**2*Z1-v1**2*v2**2*f**2*Z2+6*v1**3*v2**3*f**2*Z1+3*v1**2*v2**2*f**4*Z1-2*v1*v2*Z2*f**2-2*v1**2*v2**2*Z2*f+6*v1**3*v2**4*Z1*f+6*v1**4*v2**4*Z1*f-2*v1**2*v2**3*Z2*f+3*v1**3*v2**5*Z1*f+6*v1**4*v2**5*Z1*f-2*v1**3*v2**3*Z2*f+3*v1**5*v2**5*Z1*f+3*f**4*v1*v2*Z1+6*f**3*v1**2*v2**2*Z1+3*f**5*v1*v2*Z1+3*f**3*v1**2*v2**3*Z1-2*v1*v2*f**3*Z2-2*v1**2*v2**3*Z1*sqrt(2*f**2*v1*v2+2*f**3*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**2*v2**3+2*v1**3*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)-2*v1**3*v2**3*Z1*sqrt(2*f**2*v1*v2+2*f**3*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**2*v2**3+2*v1**3*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)-v1**4*v2**4*Z1*sqrt(2*f**2*v1*v2+2*f**3*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**2*v2**3+2*v1**3*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)-2*v1**2*v2**2*f**2*Z1*sqrt(2*f**2*v1*v2+2*f**3*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**2*v2**3+2*v1**3*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)+v1*v2**2*Z2*sqrt(2*f**2*v1*v2+2*f**3*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**2*v2**3+2*v1**3*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)-v1*v2**2*f**2*Z1*sqrt(2*f**2*v1*v2+2*f**3*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**2*v2**3+2*v1**3*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)-2*f**2*v1*v2*Z1*sqrt(2*f**2*v1*v2+2*f**3*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**2*v2**3+2*v1**3*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)-v1**2*v2**2*Z1*sqrt(2*f**2*v1*v2+2*f**3*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**2*v2**3+2*v1**3*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)+v1*v2*Z2*sqrt(2*f**2*v1*v2+2*f**3*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**2*v2**3+2*v1**3*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)-v1**2*v2**4*Z1*sqrt(2*f**2*v1*v2+2*f**3*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**2*v2**3+2*v1**3*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)-2*v1**3*v2**4*Z1*sqrt(2*f**2*v1*v2+2*f**3*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**2*v2**3+2*v1**3*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)-f**4*Z1*sqrt(2*f**2*v1*v2+2*f**3*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**2*v2**3+2*v1**3*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)-2*v1**2*v2**3*f*Z1*sqrt(2*f**2*v1*v2+2*f**3*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**2*v2**3+2*v1**3*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)-2*v1**3*v2**3*f*Z1*sqrt(2*f**2*v1*v2+2*f**3*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**2*v2**3+2*v1**3*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)-2*f**3*v1*v2*Z1*sqrt(2*f**2*v1*v2+2*f**3*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**2*v2**3+2*v1**3*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)+v1**2*v2**2*Z2*sqrt(2*f**2*v1*v2+2*f**3*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**2*v2**3+2*v1**3*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)-2*v1**2*v2**2*f*Z1*sqrt(2*f**2*v1*v2+2*f**3*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**2*v2**3+2*v1**3*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)+v1*v2*f*Z2*sqrt(2*f**2*v1*v2+2*f**3*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**2*v2**3+2*v1**3*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)+f**2*Z2*sqrt(2*f**2*v1*v2+2*f**3*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**2*v2**3+2*v1**3*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4))*(-(2*v1*v2**2*f**2+2*v1**2*v2**2*f**2)/(-f**2-v1*v2-v1*v2*f-v1*v2**2-v1**2*v2**2+sqrt(2*f**2*v1*v2+2*f**3*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**2*v2**3+2*v1**3*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)))**n/(sqrt(2*f**2*v1*v2+2*f**3*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**2*v2**3+2*v1**3*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)*v1*v2**2*f**2*(1+v1)*(-f**2-v1*v2-v1*v2*f-v1*v2**2-v1**2*v2**2+sqrt(2*f**2*v1*v2+2*f**3*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**2*v2**3+2*v1**3*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)))
    return zx


def scaleZ(beta):
    zx = Z(beta)
    vx = abs(zx)
    s = log(vx)/10
    return zx * (s/vx)

def scaleZ_inv(T):
    try: zx = Z(1./T)
    except: return MAXV
    if isnan(zx) or isinf(zx): return MAXV
    
    vx = abs(zx)
    s = log(vx)/10
    return zx * (s/vx)

ax  = subplot(1,2,1)
cplot(scaleZ, [-2,2],[-2,2],points=num_points,verbose=True,axes=ax)
xlabel(r'Re($\beta$)')
ylabel(r'Im($\beta$)')

ax  = subplot(1,2,2)
cplot(scaleZ_inv, [-2,2],[-2,2],points=num_points,verbose=True,axes=ax)
xlabel(r'Re($T$)')
ylabel(r'')
ax.set_yticks([])



from os import system
f = 'pictures/zeros_parition_func_2N_ladder_2'
savefig(f+'.pdf',
        pad_inches=0,transparent=True)
system('pdfcrop %s.pdf' % f)
system('mv %s-crop.pdf %s.pdf' % (f,f))


show()

