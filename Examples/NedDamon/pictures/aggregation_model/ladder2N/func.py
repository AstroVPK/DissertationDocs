from __future__ import division
from math import sqrt

def ZN(v1,v2,q,n):
    f = v2 + q
    Z1 = q*v1 + q**2
    Z2 = q**2*v1**2 + q**2*v2**2 + q*v1**2*v2**2 + 2*q*v1*v2**2 + 2*q*v2*v1**2 + 4*v1*v2*q**2 + 2*v1*q**3 + 2*v2*q**3 + q**4

    return (3*v1**2*v2**2*f**2*Z1+3*v1**3*v2**3*f*Z1+v1**3*v2**3*Z1+3*v1**3*v2**4*Z1-v1**2*v2**2*Z2+3*v1**4*v2**4*Z1+f**2*Z2*sqrt(2*f**3*v1*v2+2*f**2*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**3*v2**3+2*v1**2*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)-f**4*Z1*sqrt(2*f**3*v1*v2+2*f**2*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**3*v2**3+2*v1**2*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)-v1**2*v2**2*Z1*sqrt(2*f**3*v1*v2+2*f**2*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**3*v2**3+2*v1**2*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)+v1*v2*Z2*sqrt(2*f**3*v1*v2+2*f**2*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**3*v2**3+2*v1**2*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)-v1**2*v2**4*Z1*sqrt(2*f**3*v1*v2+2*f**2*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**3*v2**3+2*v1**2*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)+v1*v2**2*Z2*sqrt(2*f**3*v1*v2+2*f**2*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**3*v2**3+2*v1**2*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)+v1**2*v2**2*Z2*sqrt(2*f**3*v1*v2+2*f**2*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**3*v2**3+2*v1**2*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)-f**4*Z2+f**6*Z1+3*v1**2*v2**3*f**3*Z1+3*v1**3*v2**4*f**2*Z1+3*v1**2*v2**3*f**2*Z1-v1**4*v2**4*Z1*sqrt(2*f**3*v1*v2+2*f**2*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**3*v2**3+2*v1**2*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)-2*v1**2*v2**3*Z2-2*v1**3*v2**3*Z2+3*v1**3*v2**5*Z1+6*v1**4*v2**5*Z1+3*v1**5*v2**5*Z1-v1**2*v2**4*Z2-2*v1**3*v2**4*Z2+v1**3*v2**6*Z1+3*v1**4*v2**6*Z1+3*v1**5*v2**6*Z1-v1**4*v2**4*Z2+v1**6*v2**6*Z1+4*v1**3*v2**3*f**3*Z1+3*v1**4*v2**4*f**2*Z1-v1**2*v2**2*f**2*Z2+6*v1**3*v2**3*f**2*Z1+3*v1**2*v2**2*f**4*Z1-2*v1*v2*Z2*f**2-2*v1**2*v2**2*Z2*f+6*v1**3*v2**4*Z1*f+6*v1**4*v2**4*Z1*f-2*v1**2*v2**3*Z2*f+3*v1**3*v2**5*Z1*f+6*v1**4*v2**5*Z1*f-2*v1**3*v2**3*Z2*f+3*v1**5*v2**5*Z1*f+3*f**4*v1*v2*Z1+6*f**3*v1**2*v2**2*Z1+3*f**5*v1*v2*Z1-2*v1*v2*f**3*Z2-2*v1**3*v2**4*Z1*sqrt(2*f**3*v1*v2+2*f**2*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**3*v2**3+2*v1**2*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)-2*v1**3*v2**3*Z1*sqrt(2*f**3*v1*v2+2*f**2*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**3*v2**3+2*v1**2*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)-2*v1**2*v2**3*Z1*sqrt(2*f**3*v1*v2+2*f**2*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**3*v2**3+2*v1**2*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)+v1*v2*f*Z2*sqrt(2*f**3*v1*v2+2*f**2*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**3*v2**3+2*v1**2*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)-v1*v2**2*f**2*Z1*sqrt(2*f**3*v1*v2+2*f**2*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**3*v2**3+2*v1**2*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)-2*f**2*v1*v2*Z1*sqrt(2*f**3*v1*v2+2*f**2*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**3*v2**3+2*v1**2*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)-2*f**3*v1*v2*Z1*sqrt(2*f**3*v1*v2+2*f**2*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**3*v2**3+2*v1**2*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)-2*v1**3*v2**3*f*Z1*sqrt(2*f**3*v1*v2+2*f**2*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**3*v2**3+2*v1**2*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)-2*v1**2*v2**3*f*Z1*sqrt(2*f**3*v1*v2+2*f**2*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**3*v2**3+2*v1**2*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)-2*v1**2*v2**2*f*Z1*sqrt(2*f**3*v1*v2+2*f**2*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**3*v2**3+2*v1**2*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)-2*v1**2*v2**2*f**2*Z1*sqrt(2*f**3*v1*v2+2*f**2*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**3*v2**3+2*v1**2*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4))*(-(2*v1*v2**2*f**2+2*v1**2*v2**2*f**2)/(-f**2-v1*v2-v1*v2*f-v1*v2**2-v1**2*v2**2+sqrt(2*f**3*v1*v2+2*f**2*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**3*v2**3+2*v1**2*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)))**n/(sqrt(2*f**3*v1*v2+2*f**2*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**3*v2**3+2*v1**2*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)*v1*v2**2*f**2*(1+v1)*(-f**2-v1*v2-v1*v2*f-v1*v2**2-v1**2*v2**2+sqrt(2*f**3*v1*v2+2*f**2*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**3*v2**3+2*v1**2*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)))+(-3*v1**2*v2**2*f**2*Z1-3*v1**3*v2**3*f*Z1-v1**3*v2**3*Z1-3*v1**3*v2**4*Z1+v1**2*v2**2*Z2-3*v1**4*v2**4*Z1+f**2*Z2*sqrt(2*f**3*v1*v2+2*f**2*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**3*v2**3+2*v1**2*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)-f**4*Z1*sqrt(2*f**3*v1*v2+2*f**2*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**3*v2**3+2*v1**2*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)-v1**2*v2**2*Z1*sqrt(2*f**3*v1*v2+2*f**2*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**3*v2**3+2*v1**2*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)+v1*v2*Z2*sqrt(2*f**3*v1*v2+2*f**2*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**3*v2**3+2*v1**2*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)-v1**2*v2**4*Z1*sqrt(2*f**3*v1*v2+2*f**2*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**3*v2**3+2*v1**2*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)+v1*v2**2*Z2*sqrt(2*f**3*v1*v2+2*f**2*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**3*v2**3+2*v1**2*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)+v1**2*v2**2*Z2*sqrt(2*f**3*v1*v2+2*f**2*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**3*v2**3+2*v1**2*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)+f**4*Z2-f**6*Z1-3*v1**2*v2**3*f**3*Z1-3*v1**3*v2**4*f**2*Z1-3*v1**2*v2**3*f**2*Z1-v1**4*v2**4*Z1*sqrt(2*f**3*v1*v2+2*f**2*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**3*v2**3+2*v1**2*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)+2*v1**2*v2**3*Z2+2*v1**3*v2**3*Z2-3*v1**3*v2**5*Z1-6*v1**4*v2**5*Z1-3*v1**5*v2**5*Z1+v1**2*v2**4*Z2+2*v1**3*v2**4*Z2-v1**3*v2**6*Z1-3*v1**4*v2**6*Z1-3*v1**5*v2**6*Z1+v1**4*v2**4*Z2-v1**6*v2**6*Z1-4*v1**3*v2**3*f**3*Z1-3*v1**4*v2**4*f**2*Z1+v1**2*v2**2*f**2*Z2-6*v1**3*v2**3*f**2*Z1-3*v1**2*v2**2*f**4*Z1+2*v1*v2*Z2*f**2+2*v1**2*v2**2*Z2*f-6*v1**3*v2**4*Z1*f-6*v1**4*v2**4*Z1*f+2*v1**2*v2**3*Z2*f-3*v1**3*v2**5*Z1*f-6*v1**4*v2**5*Z1*f+2*v1**3*v2**3*Z2*f-3*v1**5*v2**5*Z1*f-3*f**4*v1*v2*Z1-6*f**3*v1**2*v2**2*Z1-3*f**5*v1*v2*Z1+2*v1*v2*f**3*Z2-2*v1**3*v2**4*Z1*sqrt(2*f**3*v1*v2+2*f**2*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**3*v2**3+2*v1**2*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)-2*v1**3*v2**3*Z1*sqrt(2*f**3*v1*v2+2*f**2*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**3*v2**3+2*v1**2*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)-2*v1**2*v2**3*Z1*sqrt(2*f**3*v1*v2+2*f**2*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**3*v2**3+2*v1**2*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)+v1*v2*f*Z2*sqrt(2*f**3*v1*v2+2*f**2*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**3*v2**3+2*v1**2*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)-v1*v2**2*f**2*Z1*sqrt(2*f**3*v1*v2+2*f**2*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**3*v2**3+2*v1**2*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)-2*f**2*v1*v2*Z1*sqrt(2*f**3*v1*v2+2*f**2*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**3*v2**3+2*v1**2*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)-2*f**3*v1*v2*Z1*sqrt(2*f**3*v1*v2+2*f**2*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**3*v2**3+2*v1**2*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)-2*v1**3*v2**3*f*Z1*sqrt(2*f**3*v1*v2+2*f**2*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**3*v2**3+2*v1**2*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)-2*v1**2*v2**3*f*Z1*sqrt(2*f**3*v1*v2+2*f**2*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**3*v2**3+2*v1**2*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)-2*v1**2*v2**2*f*Z1*sqrt(2*f**3*v1*v2+2*f**2*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**3*v2**3+2*v1**2*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)-2*v1**2*v2**2*f**2*Z1*sqrt(2*f**3*v1*v2+2*f**2*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**3*v2**3+2*v1**2*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4))*(-(2*v1*v2**2*f**2+2*v1**2*v2**2*f**2)/(-v1*v2*f-v1*v2**2-f**2-v1*v2-v1**2*v2**2-sqrt(2*f**3*v1*v2+2*f**2*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**3*v2**3+2*v1**2*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)))**n/(sqrt(2*f**3*v1*v2+2*f**2*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**3*v2**3+2*v1**2*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)*v1*v2**2*f**2*(1+v1)*(-v1*v2*f-v1*v2**2-f**2-v1*v2-v1**2*v2**2-sqrt(2*f**3*v1*v2+2*f**2*v1*v2+2*v1**2*v2**2*f+2*v1**2*v2**3*f+2*v1**3*v2**3*f-2*v1*v2**2*f**2-v1**2*v2**2*f**2+v1**2*v2**2+f**4+2*v1**3*v2**3+2*v1**2*v2**3+v1**2*v2**4+v1**4*v2**4+2*v1**3*v2**4)))



from scipy import *
from pylab import *

T = .7
N = 30
q = 2

for q in linspace(5, 200, 20):
    J1 = linspace(.01,15,100)
    J2 = 1.2
    T  = 1.7
    Z = J1.copy()
    for idx in ndindex(J1.shape):
        v2 = exp(J2/T)
        v1 = exp(J1/T)
        Z[idx] = ZN(v1[idx],v2,q,N)
    Z = log(Z)

    print Z,q
    print diff(Z)
    #plot(J1[1:],diff(Z))
    plot(J1[2:],diff(diff(Z))/T**2)
show()

'''
J1 = arange(0,5,.1)
J2 = arange(0,5,.1)
JX,JY = meshgrid(J1,J2)
F     = zeros(JX.shape)

for idx in ndindex(JX.shape):
    v1 = exp(JX[idx]/T)
    v2 = exp(JY[idx]/T)
    print v1,v2
    F[idx] = -log(ZN(v1,v2,q,N))

imshow(F,interpolation='nearest')
#legend()
show()
'''


#for J1 in arange(1,2,.1):
#    for J2 in arange(1,2,.1):
#        v1 = exp(J1/T)
#        v2 = exp(J2/T)
#        print log(ZN(J1,J2,q,T))
